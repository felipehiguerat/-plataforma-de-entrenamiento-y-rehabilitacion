services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s


  exercises_db_service:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: exercises_db # ¡Nueva base de datos para Exercises!
      POSTGRES_USER: user # Puedes usar el mismo usuario y contraseña si quieres, o cambiarlos
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432" # ¡Nuevo puerto en el host para esta DB!
    volumes:
      - exercises_db_data:/var/lib/postgresql/data # Volumen dedicado para Exercises DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d exercises_db"] # Chequea la nueva DB
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s


  biometric_db_service:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: biometric_db # Nueva base de datos para Biometrics
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432" # Nuevo puerto en el host para esta DB
    volumes:
      - biometric_db_data:/var/lib/postgresql/data # Volumen dedicado para Biometrics DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d biometric_db"] # Chequea la nueva DB
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s



  auth-service:
    build:
      context: ../microservicios/auth-service
      dockerfile: Dockerfile
    ports:
      - "8002:8001"
    environment:
      # Updated to use individual environment variables
      DB_HOST: db # This is the service name of your database container
      DB_PORT: 5432
      POSTGRES_DB: auth_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      SECRET_KEY: "tu_super_clave_secreta_aqui_para_jwt_cambiala_en_produccion" # Asegúrate que sea la misma de tu app/config.py
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure



  exercises-sessions-service:
    build:
      context: ../microservicios/exercises-sessions-service
      dockerfile: Dockerfile
    ports:
      - "8003:8001"
    environment:
      DATABASE_URL: postgresql://user:password@exercises_db_service/exercises_db # Apunta a su nueva DB dedicada
    depends_on:
      exercises_db_service: # Ahora depende de su propia DB
        condition: service_healthy
    restart: on-failure

  biometric-service:
    build:
      context: ../microservicios/biometric-service # Asegúrate que esta ruta sea correcta
      dockerfile: Dockerfile
    ports:
      - "8004:8001" # Nuevo puerto para el servicio de biometría
    environment:
      DATABASE_URL: postgresql://user:password@biometric_db_service/biometric_db # Apunta a su nueva DB dedicada
    depends_on:
      biometric_db_service: # Ahora depende de su propia DB
        condition: service_healthy
    restart: on-failure


volumes:
  db_data: # Define el volumen para la persistencia
  exercises_db_data:
  biometric_db_data:
